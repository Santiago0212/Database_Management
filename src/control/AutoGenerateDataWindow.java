package control;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.concurrent.ThreadLocalRandom;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.stage.Stage;
import main.Main;
import model.AVLTree;
import model.BRTree;
import model.Person;
import model.Sex;

public class AutoGenerateDataWindow <K extends Comparable<K>,V>implements Initializable{
	
	private int num;
	
    @FXML
    private Button closeBTN;
	
    @FXML
    private ProgressBar autoGeneDataPB;
    
    private AVLTree<K, V> nameData;
    
    public AutoGenerateDataWindow(AVLTree<K, V> nameData,int num) {
    	this.nameData = nameData;
    	this.num=num;
    }

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		
		new Thread(()->{
			try {
				createCombinations();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}).start();
		 
	}
	
	public void createCombinations() throws IOException {
		String[] names = importNames();
		String[] lastNames = importLastNames();

		int numI=1000;
		int numJ=1000;
		
		int total=999000;
		
		String[ ] paises = new String[] {"Canada","Estados Unidos","Mexico","Belice","Costa rica","El Salvador",
	    		"Guatemala","Honduras","Nicaragua","Panamá","Argentina","Bolivia","Brasil","Chile","Colombia","Ecuador",
	    		"Paraguay","Peru","Surinam","Trinidad y Tobago","Uruguay","Venezuela","Antigua y Barbuda","Bahamas","Barbados",
	    		"Cuba","Dominica","Granada","Guyana","Haiti","Jamaica","República Dominicana","San Cristóbal y Nieves","San Vicente y las Granadinas","Santa Lucia"};
		double[] poblacionesDouble=new double[] {0.03*total,0.25*total,0.10*total,0.01*total,0.01*total,0.01*total,0.02*total,0.01*total,0.01*total,0.01*total,0.04*total,0.01*total,0.18*total,0.02*total,0.05*total,0.02*total,0.01*total,0.03*total,0.01*total,0.01*total,0.01*total,0.02*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total,0.01*total};
	    int [] poblaciones=new int[poblacionesDouble.length];
	    
	    for(int i=0;i<poblaciones.length;i++) {
	    	poblaciones[i]=(int) poblacionesDouble[i];
	    }
	    
	    
	    double contador=1;
		double c=0;
	   
		int k = 0;
		
		for(int i = 0; i<numI; i++) {
			for(int j = 0; j<numJ; j++) {
				String name = names[i].split(",")[0];
				String sexString = names[i].split(",")[1];
				String lastName = lastNames[j];
				String code = k+"";
				
				//System.out.println(name);
				
				if(name!=null && sexString!=null && lastName!=null && code!=null) {
					
					Sex sex = null;
					if(sexString.equalsIgnoreCase("BOY")) {
						sex = Sex.MALE;
					} else if(sexString.equalsIgnoreCase("GIRL")) {
						sex = Sex.FEMALE;
					}
					
					LocalDate startDate = LocalDate.of(1990, 1, 1);
				    long start = startDate.toEpochDay();
				    LocalDate endDate = LocalDate.now();
				    long end = endDate.toEpochDay();
				    ZoneId defaultZoneId = ZoneId.systemDefault();
				    long randomEpochDay = ThreadLocalRandom.current().longs(start, end).findAny().getAsLong();
				    Date date = Date.from(LocalDate.ofEpochDay(randomEpochDay).atStartOfDay(defaultZoneId).toInstant());
				    
				    double randomHeight=getRandom(100,210);
				    randomHeight=randomHeight/100;
				    String nationality="";
				    if(total>100) {
				    	boolean out=false;
					    while(!out) {
					    	int randomNationality=getRandom(1, 35);
					    	if(poblaciones[randomNationality]>0) {
					    		nationality=paises[randomNationality];
					    		out=true;
					    	}
					    }
				    }else {
				    	int randomNationality=getRandom(1, 35);
				    	nationality=paises[randomNationality];
				    }
				    
					
					Person person = new Person(k+"", name, lastName, sex, date, randomHeight, nationality);
					
					Main.addPerson(k,person);
					
					c=contador/100;
					double t=total*c;
					
					if(k/t==1) {
						autoGeneDataPB.setProgress(contador/100);
						contador=contador+1;
					}
		
					k++;
					Main.setCodeAux(k);
					
				}
			}
		}
		autoGeneDataPB.setProgress(1); 
		closeBTN.setDisable(false);

	}
	@FXML
    void cerrar(ActionEvent event) {
		Stage stage = (Stage) closeBTN.getScene().getWindow();
	    stage.close();
    }
	
	public static String[] importNames() throws IOException {
		String path = "means/babynames-clean.csv";
		
		String[] namesList = new String[1000];
		
		File names = new File(path);
		
		if(names.exists()) {
			FileReader fr = new FileReader(path);
			BufferedReader br = new BufferedReader(fr);
			
			String line;
			
			int i = 0;
			boolean finished = false;
			
			while((line = br.readLine())!=null && !finished) {
				if(i<1000) {
					namesList[i] = line.toUpperCase();
				}
				i++;
			}
			
			if (br != null)br.close();
            if (fr != null)fr.close();
			
		}
		
		return namesList;
		
	}
	
	public static String[] importLastNames() throws IOException {
		String path = "means/Names_2010Census.csv";
		
		String[] lastNamesList = new String[1000];
		
		File names = new File(path);
		
		if(names.exists()) {
			FileReader fr = new FileReader(path);
			BufferedReader br = new BufferedReader(fr);
			
			String line;
			
			int i = 0;
			boolean finished = false;
			
			while((line = br.readLine())!=null && !finished) {
				if(i<1000 && i>0) {
					String[] data = line.split(",");
					lastNamesList[i] = data[0];
				}
				i++;
			}
			
			if (br != null)br.close();
            if (fr != null)fr.close();
			
		}
		
		return lastNamesList;
	}
	
	public static int getRandom(int min, int max) {
	    Random random = new Random();
	    return random.nextInt(max - min) + min;
	}

}
